time_bucket


union_all函数
IGPEvents_info = IGPEvents.select(IGPEvents.id, IGPEvents.event_name, IGPEvents.action_type,
                                              fn.to_char(IGPEvents.create_time, 'YYYY/MM/DD HH:MM:SS').alias('create_time'))
                                              .where(fn.to_char(IGPEvents.create_time, 'YYYY-MM-DD') == now.strftime('%Y-%m-%d'))
BGPEvents_info = BGPEvents.select(BGPEvents.id, BGPEvents.event_name, BGPEvents.action_type,
                                        fn.to_char(BGPEvents.create_time, 'YYYY/MM/DD HH:MM:SS').alias('create_time'))
                                        .where(fn.to_char(BGPEvents.create_time, 'YYYY-MM-DD') == now.strftime('%Y-%m-%d'))
Events_info = IGPEvents_info.union_all(BGPEvents_info).dicts()
将两个查询结果集组合成一个大的结果集，字段长度必须一致


步骤一：将需要查询的表名列一个别名
start_igp_events = IGPEvents.alias()
步骤二：用别名表作为查询表，查询所需要查询的数据，但是不能join连接外表，
active_igp_events = start_igp_events.select().where(
    fn.to_char(start_igp_events.create_time, 'YYYY-MM-DD') == now.strftime('%Y-%m-%d'),
    start_igp_events.is_alarm == 1)
 步骤三：将查询的结果作为一个对象然后.alias('jq')
make_igp_events = active_igp_events.alias('jq')
步骤四：已经列为别名的表需要加的表名后面，字段后面必须加.c,
end_igp_events = IGPEvents.select(IGPEvents.event_name, fn.count(IGPEvents.id).alias('all'),
                                  fn.count(make_igp_events.c.id).alias('other')).join(make_igp_events,JOIN.LEFT_OUTER, 
                                  on=(IGPEvents.id == make_igp_events.c.id)).group_by(IGPEvents.event_name).dicts()
当将两个查询条件不一样，字段名一样，但是不等长，一个数据集长一部分，将两个数据集组合在一个，但是效果是往字段后面加一个查询集的字段，上面那个是增加数据集
数量，短的数据集合并在一起是，字段数据为0



time_bucket
postgres的扩展库
RouterHistory_info = RouterHistory.select(
            fn.time_bucket(time_layout, RouterHistory.create_time).alias("interval"),
            fn.Count(RouterHistory.create_time).alias('count')) \
            .group_by(fn.time_bucket(time_layout, RouterHistory.create_time)) \
            .dicts()
time_bucket的作用：能以某分，某秒，或者几分几秒作为分段条件
注意：别名必须是.alias("interval")，
分组的时候使用该函数，但是不能使用别名



alias
想用一个表的查询结果作为一个对象然后和该表的另一个查询相关联，可以在查询对象的最后加上.alias('别名'),
然后下面直接join()这个表名就可以做到相关联了
