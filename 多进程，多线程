
全局锁（GIL）
python中一个线程对应C语言中的一个线程
GIL使得同一个时刻只有一个线程在一个CPU上执行字节码，无法将多个线程映射到多个CPU上执行
GIL会根据执行的字节码行数以及时间片释放GIL，GIL在遇到IO的操作时主动释放

total = 0
def add():
    global total
    for item in range(1000000):
        total += 1

def desc():
    global total
    for item in range(1000000):
        total -= 1

import threading
thread1 = threading.Thread(target=add)
thread2 = threading.Thread(target=desc)
thread1.start()
thread2.start()

thread1.join()
thread2.join()
print(total)
它不会导致add运行完再去运行desc，add执行了多少个字节码就会解锁，
这个机制是由系统决定



**********************************************************************************************
线程
import time
import threading

def get_detail_html(url):
    print('this is html one')
    time.sleep(2)
    print('this is html two')

def get_detail_url(url):
    print('this is url one')
    time.sleep(4)
    print('this is url two')

if __name__ == '__main__':
    thread1 = threading.Thread(target=get_detail_html,args=('',))
    thread2 = threading.Thread(target=get_detail_url,args=('',))

    # setDaemon把某一个线程设置为守护线程，主线程使用完就会挂掉
    # thread1.setDaemon(True)
    # thread2.setDaemon(True)
    start_time = time.time()
    thread1.start()
    thread2.start()

    # 想子线程执行完，再执行主线程，使用join，会把当前线程阻塞在这儿，
    # 执行完，再执行下一步
    thread1.join()
    thread2.join()

    # 当不做任何操作的时候，这个主线程运行完过后再运行子线程
    print('last time:{}'.format(time.time()-start_time))
    
-------------------------------------------------------------------------------
# 通过继承Thread来实现多线程，效果同上
class GetDetailHtml(threading.Thread):
    def __init__(self,name):
        super().__init__(name=name)

    def run(url):
        print('this is html one')
        time.sleep(2)
        print('this is html two')

class GetDetailUrl(threading.Thread):
    def __init__(self,name):
        super().__init__(name=name)

    def run(url):
        print('this is url one')
        time.sleep(4)
        print('this is url two')

if __name__ == '__main__':
    thread1 = GetDetailHtml('one')
    thread2 = GetDetailUrl('two')

    # thread1.setDaemon(True)
    # thread2.setDaemon(True)
    start_time = time.time()
    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()

    print('last time:{}'.format(time.time()-start_time))
